import { Injectable } from '@angular/core';
import axios, { AxiosInstance, AxiosResponse } from 'axios';
import { Observable, from } from 'rxjs';
import { map, catchError } from 'rxjs/operators';

@Injectable({
    providedIn: 'root'
})
export class ApiService {
    private api: AxiosInstance;
    readonly baseURL = 'https://hydra.bastionmc.fr';

    constructor() {
        // Configuration d'Axios avec l'URL de base
        this.api = axios.create({
            baseURL: this.baseURL,
            timeout: 30000, // 30 secondes
            headers: {
                'Content-Type': 'application/json'
            }
        });

        // Intercepteur pour les requ√™tes
        this.api.interceptors.request.use(
            config => {
                // Log de la requ√™te en d√©veloppement
                if (window.location.hostname === 'localhost') {
                    console.log(`üì§ ${config.method?.toUpperCase()} ${config.url}`);
                }
                return config;
            },
            error => {
                console.error('‚ùå Erreur de requ√™te:', error);
                return Promise.reject(error);
            }
        );

        // Intercepteur pour les r√©ponses
        this.api.interceptors.response.use(
            response => {
                // Log de la r√©ponse en d√©veloppement
                if (window.location.hostname === 'localhost') {
                    console.log(`üì• ${response.status} ${response.config.url}`);
                }
                return response;
            },
            error => {
                if (error.response) {
                    console.error(`‚ùå Erreur API ${error.response.status}:`, error.response.data);
                } else if (error.request) {
                    console.error('‚ùå Aucune r√©ponse re√ßue:', error.request);
                } else {
                    console.error('‚ùå Erreur de configuration:', error.message);
                }
                return Promise.reject(error);
            }
        );
    }

    /**
     * Transformation d'une promesse Axios en Observable RxJS
     */
    private toObservable<T>(promise: Promise<AxiosResponse<T>>): Observable<T> {
        return from(promise).pipe(
            map(response => response.data),
            catchError(error => {
                // Rejeter l'erreur pour qu'elle soit captur√©e par le subscriber
                throw error;
            })
        );
    }

    /**
     * M√©thode GET g√©n√©rique
     */
    public get<T>(url: string, params?: any): Observable<T> {
        return this.toObservable<T>(this.api.get(url, { params }));
    }

    /**
     * M√©thode POST g√©n√©rique
     */
    public post<T>(url: string, data?: any, params?: any): Observable<T> {
        return this.toObservable<T>(this.api.post(url, data, { params }));
    }

    /**
     * M√©thode PUT g√©n√©rique
     */
    public put<T>(url: string, data?: any): Observable<T> {
        return this.toObservable<T>(this.api.put(url, data));
    }

    /**
     * M√©thode DELETE g√©n√©rique
     */
    public delete<T>(url: string): Observable<T> {
        return this.toObservable<T>(this.api.delete(url));
    }
}
